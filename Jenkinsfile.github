/*
 *
 *  MIT License
 *
 *  (C) Copyright 2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

def getRpmName(packageName, pythonVersion) {
    if (pythonVersion == "3.6") {
        return "python3-${packageName}"
    }
    def pythonVersionParts = pythonVersion.tokenize('.')
    def pyMajor = "${pythonVersionParts[0]}"
    def pyMinor = "${pythonVersionParts[1]}"
    return "python${pyMajor}${pyMinor}-${packageName}"
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }
    environment {
        NAME = "requests-retry-session"
        DESCRIPTION = "Library for creating a requests session with timeouts and retries"
        IS_STABLE = getBuildIsStable()
        RPM_ARCH = "noarch"
        RPM_OS = "noos"
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {		
                    sh "make runbuildprep"
                }
            }
        }

        stage("Lint") {
            steps { sh "make lint" }
        }

        stage('Build and Publish Python module') {
            agent {
                docker {
                    args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc"
                    reuseNode true
                    image "${pyImage}:3.11"
                }
            }
            steps {
                sh "make pymod"
                publishCsmPythonModules(module: env.NAME, isStable: env.IS_STABLE)
            }
        }

        // The RPM build metadata can be added outside of the matrix, because it is just based on the
        // Git commit being built
        stage("RPM metadata") {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            steps {
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "${env.WORKSPACE}/${env.NAME}.spec")
            }
        }

        stage('Build RPMs') {
            matrix {
                axes {
                    axis {
                        name 'PY_VERSION'
                        values '3.6', '3.9', '3.10', '3.11', '3.12'
                    }
                }

                agent {
                    docker {
                        args '-v /home/jenkins/.ssh:/home/jenkins/.ssh'
                        reuseNode true
                        image "${pyImage}:${PY_VERSION}"
                    }
                }

                environment {
                    PY_VERSION = "${PY_VERSION}"
                    RPM_NAME = getRpmName(env.NAME, "${PY_VERSION}")
                    BUILD_RELDIR = "dist/rpmbuild/${env.RPM_ARCH}/${PY_VERSION}"
                    BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                    SPEC_FILE = "${env.NAME}.spec"
                }

                stages {
                    stage('Build RPMs') {
                        environment {
                            BUILD_DIR = "${env.WORKSPACE}/${BUILD_RELDIR}"
                        }
                        steps {
                            sh "make rpm"
                        }
                    }

                    stage('Publish Rpms') {
                        steps {
                            script {
                                publishCsmRpms(
                                        arch: env.RPM_ARCH,
                                        isStable: env.IS_STABLE,
                                        component: env.NAME,
                                        os: env.RPM_OS,
                                        pattern: "${BUILD_RELDIR}/RPMS/${env.RPM_ARCH}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: env.IS_STABLE,
                                        os: env.RPM_OS,
                                        pattern: "${BUILD_RELDIR}/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
